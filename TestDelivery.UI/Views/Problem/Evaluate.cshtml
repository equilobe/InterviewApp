@model TestDelivery.UI.ViewModels.Evaluate.EvaluateAnswerVM

@{
    var q = (TestDelivery.DAL.Questions.Problem)Model.Question;
    var a = (TestDelivery.DAL.ProblemAnswer)Model.Answer;
}

@if (!string.IsNullOrEmpty(q.Content))
{    
    <div class="question-text"></div>
    <textarea class="question-text-textarea" style="display:none;">@Html.Raw(q.Content)</textarea>
    <script type="text/javascript">
        convertMarkdown(".question-text-textarea", ".question-text");
    </script>
}

@if (!string.IsNullOrEmpty(q.EvaluatorNotes))
{
    <div class="evaluator-notes">
        <div class="label">
            <label>Evaluator notes</label>
        </div>
        <div class="evaluator-notes-text"></div>
        <textarea class="evaluator-notes-textarea" style="display:none;">@Html.Raw(q.EvaluatorNotes)</textarea>        
        <script type="text/javascript">
            convertMarkdown(".evaluator-notes-textarea", ".evaluator-notes-text");
        </script>
    </div>
}

@if (!a.IsExpired && q.AnswerSections != null && a.SectionAnswers != null)
{
    <div class="label">
        <label>Answer sections</label>
    </div>
    <div class="answer-sections">
        @for (int i = 0; i < q.AnswerSections.Count; i++)
        {            
            <div class="answer-section">
                <div class="label">
                    <label>@q.AnswerSections[i].Name</label>
                </div>
                <pre>@a.SectionAnswers[i]</pre>
            </div>
        }
    </div>
}